---
# - name: Create Datacenter
#   vmware_datacenter:
#     hostname: '{{ vcsa_fqdn }}'
#     username: 'administrator@{{ vcsa_sso_domain }}'
#     password: '{{ vcsa_password }}'
#     validate_certs: no
#     datacenter_name: '{{ vcsa_datacenter }}'
#     state: present
#   delegate_to: localhost

# - name: Create Clusters
#   community.vmware.vmware_cluster:
#     hostname: '{{ vcsa_fqdn }}'
#     username: 'administrator@{{ vcsa_sso_domain }}'
#     password: '{{ vcsa_password }}'
#     datacenter_name: '{{ vcsa_datacenter }}'
#     cluster_name: "{{ item.key }}"
#     validate_certs: False
#     state: present
#   loop: "{{ esxi_clusters | dict2items }}"

# - name: Enable DRS on each Cluster, if applicable
#   community.vmware.vmware_cluster_drs:
#     hostname: "{{ vcsa_fqdn }}"
#     username: "administrator@{{ vcsa_sso_domain }}"
#     password: "{{ vcsa_password }}"
#     validate_certs: False
#     datacenter_name: "{{ vcsa_datacenter }}"
#     cluster_name: "{{ item.key }}"
#     enable_drs: "{{ item.value.DRS }}"
#   loop: "{{ esxi_clusters | dict2items }}"
 
# - name: Enable HA without admission control
#   community.vmware.vmware_cluster_ha:
#     hostname: "{{ vcsa_fqdn }}"
#     username: "administrator@{{ vcsa_sso_domain }}"
#     password: "{{ vcsa_password }}"
#     validate_certs: False
#     datacenter_name: "{{ vcsa_datacenter }}"
#     cluster_name: "{{ item.key }}"
#     enable: "{{ item.value.HA }}"
#   loop: "{{ esxi_clusters | dict2items }}"
#   delegate_to: localhost

# - name: Add nested ESXi host to vCenter
#   community.vmware.vmware_host:
#     hostname: "{{ vcsa_fqdn }}"
#     username: "administrator@{{ vcsa_sso_domain }}"
#     password: "{{ vcsa_password }}"
#     validate_certs: False
#     datacenter_name: "{{ vcsa_datacenter }}"
#     cluster_name:    "{{ item.cluster }}"
#     esxi_hostname: "{{ item.name }}"
#     esxi_username: "{{ item.user }}"
#     esxi_password: "{{ item.password }}"
#     state: present
#   loop: "{{ esxi_hosts }}"
#   delegate_to: localhost

# - name: Add a VMware vSwitch with multiple NICs
#   community.vmware.vmware_vswitch:
#     hostname: "{{ item.0.name }}"
#     username: "{{ item.0.user }}"
#     password: "{{ item.0.password }}"
#     validate_certs: False
#     switch: "{{ item.1.name }}"
#     nics: "{{ item.1.uplink }}"
#   loop: "{{ esxi_hosts | subelements('esxi_vswitch', 'skip_missing=True') }}"
#   delegate_to: localhost

# - name: Add Network VM Portgroup for VSS
#   community.vmware.vmware_portgroup:
#       hostname: "{{ item.0.name }}"
#       username: "{{ item.0.user }}"
#       password: "{{ item.0.password }}"
#       validate_certs: False
#       esxi_hostname: '{{ item.0.name }}'
#       switch: "{{ item.1.vmswitch }}"
#       portgroup: "{{ item.1.name }}"
#   loop: "{{ esxi_hosts | subelements('esxi_vmks', 'skip_missing=True') }}"
#   delegate_to: localhost

# -  name: Add vmkernel port
#    community.vmware.vmware_vmkernel:
#       hostname: "{{ item.0.name }}"
#       username: "{{ item.0.user }}"
#       password: "{{ item.0.password }}"
#       validate_certs: False
#       esxi_hostname: '{{ item.0.name }}'
#       vswitch_name: "{{ item.1.vmswitch }}"
#       portgroup_name: "{{ item.1.name }}"
#       network:
#         type: 'static'
#         ip_address: "{{ item.1.ipv4 }}"
#         subnet_mask: "{{ item.1.netmask }}"
#       state: present
#    loop: "{{ esxi_hosts | subelements('esxi_vmks', 'skip_missing=True') }}"
#    delegate_to: localhost

# - name: Build datastores to add single host
#   set_fact:
#       clusters_drs_rules: |
#         [
#             {% for cluster in esxi_clusters %}
#             {% if "drsrules" in esxi_clusters[cluster] %}
#               {% for rules in esxi_clusters[cluster].drsrules %}
#                 {
#                     "cluster_name"  : "{{ cluster }}",
#                     "rule_name"     : "{{ rules.name }}",
#                     "rule_vms"      : {{ rules.vms | list }},
#                     "rule_affinity" : "{{ rules.affinity_rule }}",
#                 },
#               {% endfor %}
#             {% endif %}
#             {% endfor %}
#         ]

# - name: Create DRS Anti-Affinity Rule for VM-VM
#   community.vmware.vmware_vm_vm_drs_rule:
#     hostname: "{{ vcsa_fqdn }}"
#     username: "administrator@{{ vcsa_sso_domain }}"
#     password: "{{ vcsa_password }}"
#     cluster_name: "{{ item.cluster_name }}"
#     validate_certs: False
#     vms: "{{ item.rule_vms }}"
#     enabled: True
#     drs_rule_name: "{{ item.rule_name }}"
#     mandatory: True
#     affinity_rule: "{{ item.rule_affinity }}"
#   loop: "{{ clusters_drs_rules }}"
#   delegate_to: localhost

# - name: Enable EVC Mode
#   community.vmware.vmware_evc_mode:
#      hostname: "{{ vcsa_fqdn  }}"
#      username: "administrator@{{ vcsa_sso_domain }}"
#      password: "{{ vcsa_password }}"
#      datacenter_name: "{{ vcsa_datacenter }}"
#      cluster_name: "{{ item.key }}"
#      validate_certs: False
#      evc_mode: "intel-merom"
#      state: present
#   loop: "{{ esxi_clusters | dict2items }}"
#   delegate_to: localhost
#   register: enable_evc

# - include_tasks: gather_info_from_esxi.yml
# - include_tasks: create_dc.yml
# - include_tasks: create_configure_cluster.yml
# - include_tasks: create_vsphere_folders.yml
# - include_tasks: add_esxi_to_vsphere.yml
# - include_tasks: place_esxi_into_mm.yml
# - include_tasks: configure_esxi_vss.yml
- include_tasks: configure_vcsa_sso.yml
# - include_tasks: create_content_library.yml



# # ### add iSCSI software #####
# - include_tasks: configure_iscsi.yml

# # Configure datastores
# - include_tasks: datastores.yml

# # # configure DVS
# - include_tasks: configure_dvs.yml




